#!/usr/bin/env ansible-playbook
---
- name: Initializing Configuration
  hosts: localhost
  connection: local
  become: false
  gather_facts: no
  any_errors_fatal: true

  tasks:

    - set_fact:
        esx_template_location: "{{ template_map[buildInfo.esx] }}"
        vcsa_template_location: "{{ template_map[buildInfo.vcsa] }}"
        vcsa_template_prefix: "{{ template_map[buildInfo.vcsa].split('/')[4] }}"
        esx_template_prefix: "{{ template_map[buildInfo.esx].split('/')[4] }}"
        controller_template_prefix: "{{ template_map[buildInfo.scvm].split('/')[4] }}"
        replRoleType: "{{ cluster.replRoleType | default(omit, True) | lower }}"
        storfsRelease: "2.5.1a"

    - name: Set Template Name
      set_fact:
        template_name: "{{ jsonData.deploy.vcCluster }}-{{ esx_template_prefix }}"
        vcsa_template: "{{ jsonData.deploy.vcCluster }}-{{ vcsa_template_prefix }}"
        cvm_template: "{{ jsonData.deploy.vcCluster }}-{{ controller_template_prefix }}-controller"
        vcsa_name: "{{ vcsa_template_prefix }}-{{ userId }}-{{ jsonData.deploy.vmPrefix }}"
        buildUrl: "{{ options.build | default(buildInfo.build, True) }}"

    - set_fact:
        vcsa_name: "{{ vcsa_template_prefix }}-{{ userId }}-{{ jsonData.deploy.vmPrefix }}-source"
      when: replRoleType is defined and replRoleType == 'source'

    - set_fact:
        vcsa_name: "{{ vcsa_template_prefix }}-{{ userId }}-{{ jsonData.deploy.vmPrefix }}-target"
      when: replRoleType is defined and replRoleType == 'target'

    # - name: Get Build Info
    #   local_action:
    #     module: getbuild.py
    #     url: "{{ buildUrl }}"

    - name: Get IP Information
      local_action:
        module: reserve.py
        clusterInfo: "{{ cluster }}"
        jsonData: "{{ jsonData }}"
        release: "2.5.1a"
        userId: "{{ userId }}"

    - name: Get VCSA IP
      local_action:
        module: reserve.py
        jsonData: "{{ jsonData }}"
        node: "{{ vcsa_name }}"

    - name: extract esx host info
      add_host: name={{ item.hypervisorMgmt }} group=esx
                ansible_user={{ jsonData.deploy.user }}
                ansible_ssh_pass={{ jsonData.esx.password | b64decode }}
                ansible_pass={{ jsonData.esx.password | b64decode }}
                esxip={{ item.hypervisorMgmt }}
                scvmip={{ item.controllerMgmt }}
                hypervisorip={{ item.hypervisorData }}
                scvmdataip={{ item.controllerData }}
                clusterName={{ item.clusterName }}
                datacenter={{ item.datacenter }}
                mgmtcip={{ item.mgmtcip }}
                datacip={{ item.datacip }}
                nodecount={{ item.nodecount }}
                storfsRelease={{ storfsRelease }}
      with_items:
          - "{{ nodes.values() }}"

    - name: extract controller info
      add_host: name={{ item.controllerMgmt }} group=controllers
                ansible_user={{ jsonData.deploy.user }}
                ansible_ssh_pass={{ jsonData.esx.password | b64decode }}
                ansible_pass={{ jsonData.esx.password | b64decode }}
                esx_host={{ item.hypervisorMgmt }}
                scvmip={{ item.controllerMgmt }}
                hypervisorip={{ item.hypervisorData }}
                dataip={{ item.controllerData }}
                clusterName={{ item.clusterName }}
                datacenter={{ item.datacenter }}
                mgmtcip={{ item.mgmtcip }}
                datacip={{ item.datacip }}
                nodecount={{ item.nodecount }}
                storfsRelease={{ storfsRelease }}
                replip={{ item.controllerRepl }}
                replcip={{ item.replcip }}
      with_items:
          - "{{ nodes.values() }}"

    - name: extract cluster info
      add_host: name={{ item.mgmtcip }} group=clusters
                ansible_user={{ jsonData.deploy.user }}
                ansible_ssh_pass={{ jsonData.esx.password | b64decode }}
                ansible_pass={{ jsonData.esx.password | b64decode }}
                esx_host={{ item.hypervisorMgmt }}
                scvmip={{ item.controllerMgmt }}
                hypervisorip={{ item.hypervisorData }}
                dataip={{ item.controllerData }}
                clusterName={{ item.clusterName }}
                datacenter={{ item.datacenter }}
                mgmtcip={{ item.mgmtcip }}
                datacip={{ item.datacip }}
                nodecount={{ item.nodecount }}
                storfsRelease={{ storfsRelease }}
                vcsaIp={{ vcsaIp | default(jsonData.vcenter.host) }}
      with_items:
          - "{{ nodes.values() }}"


- name: Create Cluster
  hosts: clusters
  become: false
  gather_facts: no
  serial: 1
  any_errors_fatal: true

  tasks:

    - set_fact:
        node_ips: []
        cvm_ips: []
        repl_ips: []
        replRoleType: "{{ cluster.replRoleType | default(omit, True) }}"

    - set_fact:
        node_ips: "{{ node_ips }} + [ '{{ hostvars[item].esx_host }}' ]"
        cvm_ips: "{{ cvm_ips }} + [ '{{ hostvars[item].scvmip }}' ]"
      with_items: "{{ groups['controllers'] }}"
      when: hostvars[item].mgmtcip == inventory_hostname

    - set_fact:
        repl_ips: "{{ repl_ips }} + [ '{{ hostvars[item].replip }}' ]"
      with_items: "{{ groups['controllers'] }}"
      when: hostvars[item].mgmtcip == inventory_hostname and replRoleType is defined

    - set_fact:
        repl_ips: "{{ repl_ips }} + [ '{{ hostvars[item].replcip }}' ]"
      with_items: "{{ groups['controllers'] }}"
      when: replRoleType is defined

    - name: Create datastore
      shell: stcli datastore create --name ds-{{ replRoleType }} --size 1 --unit tb

    - name: Configure DR Network
      local_action:
        module: setReplicationNetwork.py
        hostname: "{{ groups['controllers'][0] }}"
        username: "local/root"
        password: "Cisco123"
        gateway: "{{ jsonData.gateway.replication[replRoleType] }}"
        netmask: "{{ jsonData.netmask.replication[replRoleType] }}"
        ips: "{{ repl_ips | unique }}"

